{
    "numFailedTestSuites": 2,
    "numFailedTests": 0,
    "numPassedTestSuites": 8,
    "numPassedTests": 58,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 2,
    "numTodoTests": 0,
    "numTotalTestSuites": 10,
    "numTotalTests": 58,
    "openHandles": [],
    "snapshot": {
        "added": 0,
        "didUpdate": false,
        "failure": false,
        "filesAdded": 0,
        "filesRemoved": 0,
        "filesRemovedList": [],
        "filesUnmatched": 0,
        "filesUpdated": 0,
        "matched": 0,
        "total": 0,
        "unchecked": 0,
        "uncheckedKeysByFile": [],
        "unmatched": 0,
        "updated": 0
    },
    "startTime": 1744183024608,
    "success": false,
    "testResults": [{
        "assertionResults": [{
            "ancestorTitles": ["getRatingbyID"],
            "duration": 173,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getRatingbyID should return the average rating when ratings are available",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return the average rating when ratings are available"
        }, {
            "ancestorTitles": ["getRatingbyID"],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getRatingbyID should return 0 when no ratings are available",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 0 when no ratings are available"
        }, {
            "ancestorTitles": ["getRatingbyID"],
            "duration": 68,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getRatingbyID should return 0 if the fetch response is not ok",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 0 if the fetch response is not ok"
        }, {
            "ancestorTitles": ["getRatingbyID"],
            "duration": 29,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getRatingbyID should return 0 if fetch itself fails",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 0 if fetch itself fails"
        }],
        "endTime": 1744183035617,
        "message": "",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\public\\getRatingbyID.spec.ts",
        "startTime": 1744183028439,
        "status": "passed",
        "summary": ""
    }, {
        "assertionResults": [{
            "ancestorTitles": ["getItems"],
            "duration": 199,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getItems should fetch items and return them sorted by releaseDate in descending order",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should fetch items and return them sorted by releaseDate in descending order"
        }, {
            "ancestorTitles": ["getItems"],
            "duration": 67,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getItems should throw an error if the fetch response is not ok",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw an error if the fetch response is not ok"
        }, {
            "ancestorTitles": ["getItems"],
            "duration": 45,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getItems should throw an error if fetch itself fails",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should throw an error if fetch itself fails"
        }, {
            "ancestorTitles": ["getItems"],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getItems should return an empty array if the API returns no items",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return an empty array if the API returns no items"
        }, {
            "ancestorTitles": ["getItems"],
            "duration": 7,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getItems should handle items with missing releaseDate and missing posterUrl gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle items with missing releaseDate and missing posterUrl gracefully"
        }, {
            "ancestorTitles": ["getItems"],
            "duration": 21,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getItems should handle invalid JSON response gracefully",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle invalid JSON response gracefully"
        }],
        "endTime": 1744183036013,
        "message": "",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\public\\getItems.spec.ts",
        "startTime": 1744183028447,
        "status": "passed",
        "summary": ""
    }, {
        "assertionResults": [{
            "ancestorTitles": ["getRatings"],
            "duration": 4,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getRatings should return a map of item IDs to their ratings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should return a map of item IDs to their ratings"
        }, {
            "ancestorTitles": ["getRatings"],
            "duration": 79,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getRatings should handle errors and set the rating to 0 for failed items",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 5,
            "retryReasons": [],
            "status": "passed",
            "title": "should handle errors and set the rating to 0 for failed items"
        }, {
            "ancestorTitles": ["getRatings"],
            "duration": 2,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "getRatings should return an empty map if no items are provided",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should return an empty map if no items are provided"
        }],
        "endTime": 1744183036212,
        "message": "",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\public\\getRatings.spec.ts",
        "startTime": 1744183035876,
        "status": "passed",
        "summary": ""
    }, {
        "assertionResults": [],
        "coverage": {},
        "endTime": 1744183038317,
        "message": "  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\grego\\Projects\\PopcornPal\\public\\register\\model.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export async function doRegister(user) {\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m \u001b[36mimport\u001b[39m { doRegister \u001b[36mas\u001b[39m defaultDoRegister } \u001b[36mfrom\u001b[39m \u001b[32m\"./model.js\"\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2 |\u001b[39m\n     \u001b[90m 3 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m onRegisterFormSubmit(\n     \u001b[90m 4 |\u001b[39m   formData\u001b[33m:\u001b[39m \u001b[33mFormData\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      \u001b[2mat Runtime.createScriptFromCode (\u001b[22mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mpublic/register/controller.ts\u001b[2m:1:1)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mpublic/register/onRegisterFormSubmit.spec.ts\u001b[39m\u001b[0m\u001b[2m:1:1)\u001b[22m\n",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\public\\register\\onRegisterFormSubmit.spec.ts",
        "startTime": 1744183038317,
        "status": "failed",
        "summary": ""
    }, {
        "assertionResults": [],
        "coverage": {},
        "endTime": 1744183038317,
        "message": "  \u001b[1m● \u001b[22mTest suite failed to run\n\n    \u001b[1m\u001b[31mJest encountered an unexpected token\u001b[39m\u001b[22m\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see \u001b[4mhttps://jestjs.io/docs/ecmascript-modules\u001b[24m for how to enable it.\n     • If you are trying to use TypeScript, see \u001b[4mhttps://jestjs.io/docs/getting-started#using-typescript\u001b[24m\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \u001b[1m\"transformIgnorePatterns\"\u001b[22m in your config.\n     • If you need a custom transformation specify a \u001b[1m\"transform\"\u001b[22m option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \u001b[1m\"moduleNameMapper\"\u001b[22m config option.\n\n    You'll find more details and examples of these config options in the docs:\n    \u001b[36mhttps://jestjs.io/docs/configuration\u001b[39m\n    For information about custom transformations, see:\n    \u001b[36mhttps://jestjs.io/docs/code-transformation\u001b[39m\n\n    \u001b[1m\u001b[31mDetails:\u001b[39m\u001b[22m\n\n    C:\\Users\\grego\\Projects\\PopcornPal\\public\\login\\model.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){export async function doLogIn(email, password) {\n                                                                                      ^^^^^^\n\n    SyntaxError: Unexpected token 'export'\n\n    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 |\u001b[39m \u001b[36mimport\u001b[39m { doLogIn \u001b[36mas\u001b[39m defaultDoLogIn } \u001b[36mfrom\u001b[39m \u001b[32m\"./model.js\"\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m   |\u001b[39m \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 2 |\u001b[39m\n     \u001b[90m 3 |\u001b[39m \u001b[36mexport\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m onLoginFormSubmit(\n     \u001b[90m 4 |\u001b[39m   formData\u001b[33m:\u001b[39m \u001b[33mFormData\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      \u001b[2mat Runtime.createScriptFromCode (\u001b[22mnode_modules/jest-runtime/build/index.js\u001b[2m:1505:14)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mpublic/login/controller.ts\u001b[2m:1:1)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mpublic/login/onLoginFormSubmit.spec.ts\u001b[39m\u001b[0m\u001b[2m:1:1)\u001b[22m\n",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\public\\login\\onLoginFormSubmit.spec.ts",
        "startTime": 1744183038317,
        "status": "failed",
        "summary": ""
    }, {
        "assertionResults": [{
            "ancestorTitles": ["Items API"],
            "duration": 309,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should create a new item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create a new item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 49,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should update an existing item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should update an existing item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 62,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should fetch all ratings",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should fetch all ratings"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 35,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search ratings by item ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search ratings by item ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 35,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search ratings by user ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search ratings by user ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 34,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should get item by ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get item by ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 26,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 for non-existent item ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 for non-existent item ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 32,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should delete an item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should delete an item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 24,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 on deleting non-existent item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 on deleting non-existent item"
        }],
        "endTime": 1744183038052,
        "message": "",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\src\\routers\\ratings.router.spec.ts",
        "startTime": 1744183026014,
        "status": "passed",
        "summary": ""
    }, {
        "assertionResults": [{
            "ancestorTitles": ["Items API"],
            "duration": 328,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should create a new item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create a new item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 51,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should update an existing item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should update an existing item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 50,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should fetch all episodes",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should fetch all episodes"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 31,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search episodes by title or fields",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search episodes by title or fields"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 41,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should get item by ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get item by ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 37,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 for non-existent item ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 for non-existent item ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 48,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should delete an item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should delete an item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 20,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 on deleting non-existent item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 on deleting non-existent item"
        }],
        "endTime": 1744183038052,
        "message": "",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\src\\routers\\episodes.router.spec.ts",
        "startTime": 1744183026021,
        "status": "passed",
        "summary": ""
    }, {
        "assertionResults": [{
            "ancestorTitles": ["Items API"],
            "duration": 412,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should create a new item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create a new item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 73,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should update an existing item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should update an existing item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 52,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should fetch all items",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should fetch all items"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 31,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search items by title or fields",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search items by title or fields"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 49,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should get item by ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get item by ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 27,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 for non-existent item ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 for non-existent item ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 25,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should delete an item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should delete an item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 18,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 on deleting non-existent item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 on deleting non-existent item"
        }],
        "endTime": 1744183038128,
        "message": "",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\src\\routers\\items.router.spec.ts",
        "startTime": 1744183026019,
        "status": "passed",
        "summary": ""
    }, {
        "assertionResults": [{
            "ancestorTitles": ["Items API"],
            "duration": 325,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should create a new item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create a new item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 59,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should update an existing item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should update an existing item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 45,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should fetch all reviews",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should fetch all reviews"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 39,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search reviews by item ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search reviews by item ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 26,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search reviews by title",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search reviews by title"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 37,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search reviews by userId",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search reviews by userId"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 34,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should get item by ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get item by ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 24,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 for non-existent item ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 for non-existent item ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 41,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should delete an item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should delete an item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 19,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 on deleting non-existent item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 on deleting non-existent item"
        }],
        "endTime": 1744183038131,
        "message": "",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\src\\routers\\review.router.spec.ts",
        "startTime": 1744183026026,
        "status": "passed",
        "summary": ""
    }, {
        "assertionResults": [{
            "ancestorTitles": ["Items API"],
            "duration": 369,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should create a new item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should create a new item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 62,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should update an existing item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should update an existing item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 67,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should fetch all watchlist",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should fetch all watchlist"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 58,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search watchlist by item ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search watchlist by item ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 60,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search watchlist by title",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search watchlist by title"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 25,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should search watchlist by status",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should search watchlist by status"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 28,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should get item by ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should get item by ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 20,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 for non-existent item ID",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 for non-existent item ID"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 40,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should delete an item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 2,
            "retryReasons": [],
            "status": "passed",
            "title": "should delete an item"
        }, {
            "ancestorTitles": ["Items API"],
            "duration": 16,
            "failureDetails": [],
            "failureMessages": [],
            "fullName": "Items API should return 404 on deleting non-existent item",
            "invocations": 1,
            "location": null,
            "numPassingAsserts": 1,
            "retryReasons": [],
            "status": "passed",
            "title": "should return 404 on deleting non-existent item"
        }],
        "endTime": 1744183038177,
        "message": "",
        "name": "C:\\Users\\grego\\Projects\\PopcornPal\\src\\routers\\watchlist.router.spec.ts",
        "startTime": 1744183025975,
        "status": "passed",
        "summary": ""
    }],
    "wasInterrupted": false
}